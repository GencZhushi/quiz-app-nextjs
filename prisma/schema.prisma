// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  quizzes   Quiz[]   // One-to-many relationship: User can have many quizzes

  @@map("users")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int        // Foreign key to User
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id            String       @id @default(cuid())
  quizId        String
  text          String
  type          QuestionType
  orderIndex    Int          @default(0)
  options       Option[]
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  
  // Numeric question fields
  minValue      Float?       @map("min_value")
  maxValue      Float?       @map("max_value")
  decimalPlaces Int?         @default(2) @map("decimal_places")
  unit          String?
  correctAnswer Float?       @map("correct_answer")
  tolerance     Float?       @default(0)
  
  // Sequence question fields
  correctSequence String?    @map("correct_sequence") // JSON array of option IDs in correct order
  
  // Rating question fields
  ratingMin       Int?       @default(1) @map("rating_min")     // Minimum rating value
  ratingMax       Int?       @default(5) @map("rating_max")     // Maximum rating value
  ratingLabels    String?    @map("rating_labels")              // JSON array of custom labels
  ratingType      String?    @default("stars") @map("rating_type") // Type: stars, numbers, emoji, etc.
  
  // Dropdown question fields
  placeholder       String?  @default("Select an option...") // Placeholder text for dropdown
  allowSearch       Boolean? @default(false) @map("allow_search") // Enable search functionality
  showOptionNumbers Boolean? @default(false) @map("show_option_numbers") // Show numbers before options
}

model Option {
  id          String   @id @default(cuid())
  questionId  String
  text        String
  isCorrect   Boolean  @default(false)
  orderIndex  Int      @default(0)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  SINGLE
  MULTIPLE
  TEXT
  NUMERIC
  SEQUENCE
  RATING
  DROPDOWN
}
